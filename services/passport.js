const passport = require("passport");
const jwt = require("jwt-simple");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const AzureStrategy = require("passport-azure-ad-oauth2").Strategy;
const mongoose = require("mongoose");
const keys = require("../config/keys");

const User = mongoose.model("users");

passport.serializeUser((user, done) => {
  done(null, user.id); //user.id not the profile id, its the unique oid generated by mongodb
});

passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

//modifies the GoogleStrategy we just imported.  think find and replace sections
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
      proxy: true,
    },
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleId: profile.id });
      if (existingUser) {
        //we already have a record with the given profile
        return done(null, existingUser);
      }
      // we don't have a user record with this ID, make one
      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);

passport.use(
  new AzureStrategy(
    {
      clientID: keys.azureClientID,
      clientSecret: keys.azureClientSecret,
      callbackURL: "/auth/azure/callback",
      proxy: true,
    },
    async (accessToken, refreshToken, params, profile, done) => {
      var azureProfile = jwt.decode(params.id_token, "", true);
      console.log("azureProfileupn", azureProfile.upn);
      console.log("azureProfile", azureProfile);
      const existingUser = await User.findOne({ googleId: azureProfile.upn });
      if (existingUser) {
        //we already have a record with the given profile
        return done(null, existingUser);
      }
      // we don't have a user record with this ID, make one
      const user = await new User({
        googleId: azureProfile.upn,
        firstName: azureProfile.given_name,
        lastName: azureProfile.family_name,
      }).save();
      done(null, user);
    }
  )
);
